/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */
package org.mule.module.fulfillmentworks;

import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyListOf;
import static org.mockito.Mockito.*;

import java.io.IOException;
import java.math.BigDecimal;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import junit.framework.Assert;

import org.junit.Before;
import org.junit.Test;
import org.mule.module.fulfillmentworks.client.OrdersClient;
import org.mule.module.fulfillmentworks.client.ProductsClient;
import org.mule.module.fulfillmentworks.transformers.ProductTransformerHelper;

import com.foursquare.fongo.Fongo;
import com.fulfillmentworks.api.AcquisitionType;
import com.fulfillmentworks.api.ArrayOfOfferComponent;
import com.fulfillmentworks.api.ArrayOfOfferOrdered;
import com.fulfillmentworks.api.ArrayOfOrderShipTo;
import com.fulfillmentworks.api.ArrayOfProductActivation;
import com.fulfillmentworks.api.ArrayOfProductBillFactor;
import com.fulfillmentworks.api.ArrayOfProductWMSSystem;
import com.fulfillmentworks.api.BillToFlag;
import com.fulfillmentworks.api.BuildType;
import com.fulfillmentworks.api.CostCenter;
import com.fulfillmentworks.api.CountFrequency;
import com.fulfillmentworks.api.GetOfferResult;
import com.fulfillmentworks.api.OMSSystem;
import com.fulfillmentworks.api.Offer;
import com.fulfillmentworks.api.OfferComponent;
import com.fulfillmentworks.api.OfferID;
import com.fulfillmentworks.api.OfferIDHeader;
import com.fulfillmentworks.api.OfferOrdered;
import com.fulfillmentworks.api.Order;
import com.fulfillmentworks.api.OrderBillTo;
import com.fulfillmentworks.api.OrderEntryView;
import com.fulfillmentworks.api.OrderHeader;
import com.fulfillmentworks.api.OrderShipTo;
import com.fulfillmentworks.api.OrderShipToKey;
import com.fulfillmentworks.api.OrderShipping;
import com.fulfillmentworks.api.OrderedBy;
import com.fulfillmentworks.api.PMSystem;
import com.fulfillmentworks.api.PackTrack;
import com.fulfillmentworks.api.PriceType;
import com.fulfillmentworks.api.Product;
import com.fulfillmentworks.api.ProductAcquisition;
import com.fulfillmentworks.api.ProductActivation;
import com.fulfillmentworks.api.ProductBillFactor;
import com.fulfillmentworks.api.ProductCharacteristics;
import com.fulfillmentworks.api.ProductHeader;
import com.fulfillmentworks.api.ProductOptional;
import com.fulfillmentworks.api.ProductSN;
import com.fulfillmentworks.api.ProductSort;
import com.fulfillmentworks.api.ProductType;
import com.fulfillmentworks.api.ProductValuation;
import com.fulfillmentworks.api.ProductWMSSystem;
import com.fulfillmentworks.api.ReceiptValution;
import com.fulfillmentworks.api.ReturnTreatment;
import com.fulfillmentworks.api.SerialNumbers;
import com.fulfillmentworks.api.ShipToFlag;
import com.fulfillmentworks.api.UsageCode;
import com.fulfillmentworks.api.WeightType;
import com.mongodb.Mongo;

public class FulfillmentWorksTestCase
{
    FulfillmentWorksCloudConnector connector;

    ProductTransformerHelper helper;

    Properties props;
    
    @Before
    public void setUp() throws UnknownHostException, IOException
    {
        props = new Properties();
        props.load(this.getClass().getResourceAsStream("/app.properties"));
        
        props.putAll(System.getProperties());
        
        //Mongo mongo = new Mongo();
        
        Fongo mongo = new Fongo("FWTest");

        connector = new FulfillmentWorksCloudConnector();
        connector.setMongoDb(mongo.getDB(props.getProperty("osis.mongo.database")));

        helper = new ProductTransformerHelper();
        helper.setSeqID(1);
        helper.setSystemID(props.getProperty("osis.fulfillmentworks.system.id"));
        helper.setOwnerID("1");

    }

    @Test
    public void testAddOrder()
    {
        Order o = new Order();

        //Setup the header
        OrderHeader orderHeader = new OrderHeader();
        Date tmpDate = new Date();
        orderHeader.setID("Order" + tmpDate.hashCode());

        Date date = new Date();

        orderHeader.setEntryDate(Utils.convert(date));


        OrderEntryView orderEntryView = new OrderEntryView();
        orderEntryView.setDescription("Default");

        o.setHeader(orderHeader);
        //End of header

        //Shipping
        OrderShipping orderShipping = new OrderShipping();
        orderShipping.setFreightCode("U11");
        orderShipping.setFreightCodeDescription("Ground");

        o.setShipping(orderShipping);
        //End shipping

        //Ordered by info
        OrderedBy orderedBy = new OrderedBy();
        orderedBy.setFirstName("Jared");
        orderedBy.setLastName("Miller");
        orderedBy.setCompanyName("Opensky");
        orderedBy.setAddress1("500 Someplace Rd");
        orderedBy.setCity("Nashville");
        orderedBy.setState("TN");
        orderedBy.setPostalCode("37076");
        orderedBy.setPhone("555-456-7890");
        orderedBy.setEmail("jmiller@opensky.com");
        orderedBy.setUID("1");
        orderedBy.setTaxExempt(false);
        orderedBy.setCommercial(false);

        o.setOrderedBy(orderedBy);
        //End ordered by

        //ShipTo Info
        ArrayOfOrderShipTo shipToArr = new ArrayOfOrderShipTo();
        OrderShipTo shipTo = new OrderShipTo();
        shipTo.setAddress1("500 new st");
        shipTo.setCityStateZipCountry("Antioch TN 37076 USA");
        shipTo.setLastName("Miller");
        shipTo.setFirstName("Jared");
        shipTo.setUID("1");
        shipTo.setKey("1");

        shipTo.setFlag(ShipToFlag.fromValue("Other"));
        shipToArr.getOrderShipTo().add(shipTo);

        o.setShipTo(shipToArr);
        //End ship to

        //Billto info
        OrderBillTo orderBillTo = new OrderBillTo();
        orderBillTo.setTaxExempt(false);
        orderBillTo.setTaxExemptApproved(false);
        orderBillTo.setFlag(BillToFlag.ORDERED_BY);
        //End Bill To

        //Ordered Offer info
        ArrayOfOfferOrdered arrayOfOfferOrdered = new ArrayOfOfferOrdered();
        OfferOrdered offerOrdered = new OfferOrdered();
        OfferID offerID = new OfferID();
        OfferIDHeader offerIDHeader = new OfferIDHeader();

        offerIDHeader.setID("SHAFFBUNDLE");
        offerID.setHeader(offerIDHeader);
        offerOrdered.setOffer(offerID);

        offerOrdered.setQuantity(1);
        //offerOrdered.setShipToKey("1");

        BigDecimal bigDecimalPrice = new BigDecimal(10);
        offerOrdered.setUnitPrice(bigDecimalPrice);

        BigDecimal bigDecimalShipping = new BigDecimal(10);
        offerOrdered.setShippingHandling(bigDecimalShipping);

        OrderShipToKey orderShipToKey = new OrderShipToKey();
        orderShipToKey.setKey("1");
        offerOrdered.setOrderShipToKey(orderShipToKey);

        arrayOfOfferOrdered.getOfferOrdered().add(offerOrdered);

        o.setOffers(arrayOfOfferOrdered);

        List<Order> orders = new ArrayList<Order>();
        orders.add(o);

        OrdersClient mockClient = mock(OrdersClient.class);
        when(mockClient.addOrders(anyListOf(Order.class))).thenReturn(Collections.singletonList("1234"));
        connector.setOrdersClient(mockClient);
        
        connector.addOrders(orders);
    }

    @Test
    public void testGetOffers()
    {
        String searchString = "SHAFFBUNDLE";
        OfferSearch searchParams = new OfferSearch().setSearchString(searchString);
        
        OrdersClient mockClient = mock(OrdersClient.class);
        List<GetOfferResult> offerList = new ArrayList<GetOfferResult>();
        GetOfferResult gor = new GetOfferResult();
        gor.setID(searchString);
        offerList.add(gor);
        when(mockClient.getOffers(any(OfferSearch.class))).thenReturn(offerList);
        connector.setOrdersClient(mockClient);
        
        List<GetOfferResult> resultList = connector.getOffers(searchParams);
        Assert.assertFalse(resultList.isEmpty());
        Assert.assertEquals(searchString,resultList.get(0).getID());
        
        verify(mockClient).getOffers(searchParams);
    }

    @Test
    public void testGetOrderStatus()
    {
        OrdersClient mockClient = mock(OrdersClient.class);
        when(mockClient.getOrderStatus("SHAFFBUNDLE")).thenReturn("Ok");
        connector.setOrdersClient(mockClient);
        String result = connector.getOrderStatus("SHAFFBUNDLE");
        Assert.assertNotSame("Error", result);
        
        verify(mockClient).getOrderStatus("SHAFFBUNDLE");
    }

    private Product generateTestProduct()
    {
        Product p = helper.getTemplateProduct();
        p.getHeader().setPartNumber(this.generateProductID());
        return p;
    }

    private String generateProductID()
    {
        Date tmpDate = new Date();
        return "pID" + tmpDate.hashCode();
    }

    private String generateOfferID()
    {
        Date tmpDate = new Date();
        return "oID" + tmpDate.hashCode();
    }

    private Product getTestProduct(String productID)
    {
        //Set up the product
        Product product = new Product();

        //Product Header
        ProductHeader productHeader = new ProductHeader();
        productHeader.setPartNumber(productID);
        productHeader.setDescription("Test Description 1");
        productHeader.setBuildType(BuildType.PRODUCT);
        productHeader.setUsageCode(UsageCode.EXCLUSIVE_TO_OWNER);
        productHeader.setOfferFlag(true);

        com.fulfillmentworks.api.Owner owner = new com.fulfillmentworks.api.Owner();
        owner.setSeqID(1);

        //Activate this to test the live db
        //owner.setSeqID(2);
        productHeader.setOwner(owner);

        CostCenter costCenter = new CostCenter();
        costCenter.setRemovable(false);
        productHeader.setCostCenter(costCenter);

        product.setHeader(productHeader);


        //Product valuation
        ProductValuation productValuation = new ProductValuation();
        productValuation.setReceiptValution(ReceiptValution.fromValue("Manual"));
        product.setValuation(productValuation);


        //Product Acquisition
        ProductAcquisition productAcquisition = new ProductAcquisition();
        productAcquisition.setAcquisitionType(AcquisitionType.UNKNOWN);
        product.setAcquisition(productAcquisition);

        //Warehouse system
        PMSystem pmSystem = new PMSystem();



        pmSystem.setID("FWDWM1");

        //DO NOT ACTIVATE THIS VALUE, IT WILL SEND TO THE LIVE DB
        //pmSystem.setID("FWWM01");


        ProductWMSSystem productWMSSystem = new ProductWMSSystem();
        productWMSSystem.setSystem(pmSystem);
        productWMSSystem.setActive(true);
        productWMSSystem.setCountFrequency(CountFrequency.ON_DEMAND);
        productWMSSystem.setIsDefault(true);

        ArrayOfProductWMSSystem arrayOfProductWMSSystem = new ArrayOfProductWMSSystem();
        arrayOfProductWMSSystem.getProductWMSSystem().add(productWMSSystem);
        product.setWarehouseSystems(arrayOfProductWMSSystem);

        //Serial Numbers
        ProductSN productSN = new ProductSN();
        productSN.setSerialNumbers(SerialNumbers.NO_SERIAL_NUMBERS);
        product.setSerialNumber(productSN);

        //Optional Info
        ProductOptional productOptional = new ProductOptional();
        productOptional.setDefaultPriceType(PriceType.EACH);
        productOptional.setReturnTreatment(ReturnTreatment.CASE_BY_CASE);
        product.setOptionalInfo(productOptional);

        //Bill Factors
        ProductBillFactor productBillFactor = new ProductBillFactor();
        productBillFactor.setFromQuantity(1);
        productBillFactor.setBillFactor(1.0);

        ArrayOfProductBillFactor arrayOfProductBillFactor = new ArrayOfProductBillFactor();
        arrayOfProductBillFactor.getProductBillFactor().add(productBillFactor);
        product.setBillFactors(arrayOfProductBillFactor);

        //Product sort
        ProductType productType = new ProductType();
        productType.setSeqID(1);
        ProductSort productSort = new ProductSort();
        productSort.setProductType(productType);
        product.setSort(productSort);

        //Characteristics
        ProductCharacteristics productCharacteristics = new ProductCharacteristics();
        productCharacteristics.setDefaultWeightType(WeightType.OZ);
        productCharacteristics.setPrePack(false);
        productCharacteristics.setPrePack(true);
        productCharacteristics.setPackTrack(PackTrack.EACH);
        productCharacteristics.setShipSeparatePackages(false);
        productCharacteristics.setImageLocal(true);
        product.setCharacteristics(productCharacteristics);

        //Default Version stuff   - Might be needed later
//        ProductVersion productVersion = new ProductVersion();
//        productVersion.setWeightType(WeightType.OZ);
//        VersionStatus versionStatus = new VersionStatus();
//        versionStatus.setSeqID(1);
//        productVersion.setStatus(versionStatus);
//        productVersion.setHasWarehouseTransactions(false);
//
//        ArrayOfProductVersion arrayOfProductVersion = new ArrayOfProductVersion();
//        arrayOfProductVersion.getProductVersion().add(productVersion);
//        product.setVersions(arrayOfProductVersion);


        //Activation
        ProductActivation productActivation = new ProductActivation();
        productActivation.setActive(true);
        OMSSystem omsSystem = new OMSSystem();
        omsSystem.setSeqID(1);
        productActivation.setOMSSystem(omsSystem);
        ArrayOfProductActivation arrayOfProductActivation = new ArrayOfProductActivation();
        arrayOfProductActivation.getProductActivation().add(productActivation);
        product.setActivation(arrayOfProductActivation);

        return product;
    }

    //Not a real test, this is here so we can call FW locally and get info about products
    //@Test
    public void testOfferDetails() throws Exception
    {
        //Set this to whatever you want to search for
        String searchString = "FULFILL-B477E";

        connector.searchBySKU(searchString);
    }

    private Offer generateTestOfferForProduct(String pID)
    {
        
        Offer o = helper.getTemplateSimpleOffer();
        o.getHeader().setID(pID);

        OfferComponent offerComponent = helper.generateTemplateOfferComponent();
        offerComponent.getProduct().getHeader().setPartNumber(pID);
        o.getComponents().getOfferComponent().clear();
        o.getComponents().getOfferComponent().add(offerComponent);
        
        return o;
    }

    private Offer generateTestOfferForBundle(List<String> skuList)
    {
        ArrayOfOfferComponent components = new ArrayOfOfferComponent();
        Offer o = helper.getTemplateBundleOffer();

        //Remove the template components
        o.getComponents().getOfferComponent().clear();

        for (String sku : skuList )
        {
            OfferComponent offerComponent = helper.generateTemplateOfferComponent();
            offerComponent.getProduct().getHeader().setPartNumber(sku);
            components.getOfferComponent().add(offerComponent);
        }

        o.setComponents(components);
        o.getHeader().setID(this.generateOfferID());

        return o;

    }

    @Test
    public void testAddProduct()
    {
        Product product = this.generateTestProduct();
        Offer offer = this.generateTestOfferForProduct(product.getHeader().getPartNumber());
        
        OrdersClient mock = mock(OrdersClient.class);
        when(mock.addProductToFW(product, offer)).thenReturn(2);
        connector.setOrdersClient(mock);
        
        ProductsClient mockProducts = mock(ProductsClient.class);
        when(mockProducts.getStockInfo(anyString())).thenReturn(0);
        connector.setProductsClient(mockProducts);
        
        int seqId = connector.addProductToFW(product, offer);

        Assert.assertNotSame(1, seqId);
        Assert.assertNotSame(-1, connector.getStockInfoLight(product.getHeader().getPartNumber()));
    }

    @Test
    public void testAddBundle()
    {
        Product product1 = this.generateTestProduct();
        Product product2 = this.generateTestProduct();
        Product product3 = this.generateTestProduct();

        Offer offer1 = this.generateTestOfferForProduct(product1.getHeader().getPartNumber());
        Offer offer2 = this.generateTestOfferForProduct(product2.getHeader().getPartNumber());
        Offer offer3 = this.generateTestOfferForProduct(product3.getHeader().getPartNumber());
        
        OrdersClient mock = mock(OrdersClient.class);
        connector.setOrdersClient(mock);
        
        when(mock.addProductToFW(any(Product.class), any(Offer.class))).thenReturn(10,11,12);

        List<String> skuList = new ArrayList<String>();
        skuList.add(product1.getHeader().getPartNumber());
        skuList.add(product1.getHeader().getPartNumber());
        skuList.add(product1.getHeader().getPartNumber());

        connector.addProductToFW(product1, offer1);
        connector.addProductToFW(product2, offer2);
        connector.addProductToFW(product3, offer3);

        
        Offer bundleOffer = generateTestOfferForBundle(skuList);
        
        when(mock.addOffer(bundleOffer)).thenReturn(2);

        int bundleSeqId = connector.addOffer(bundleOffer);
        Assert.assertNotSame(1, bundleSeqId);
        
        OfferSearch searchParams = new OfferSearch().setSearchString(bundleOffer.getHeader().getID());
        
        GetOfferResult gor = new GetOfferResult();
        gor.setID(bundleOffer.getHeader().getID());
        gor.setProdCount(3);
        List<GetOfferResult> lgor = Collections.singletonList(gor);
        when(mock.getOffers(any(OfferSearch.class))).thenReturn(lgor);
        
        List<GetOfferResult> resultList = connector.getOffers(searchParams);
        Assert.assertFalse(resultList.isEmpty());
        Assert.assertEquals(bundleOffer.getHeader().getID(),resultList.get(0).getID());

        for(GetOfferResult result : resultList)
        {
            Assert.assertSame(skuList.size(), result.getProdCount());

        }

        ProductsClient mockProducts = mock(ProductsClient.class);
        when(mockProducts.getStockInfo(anyString())).thenReturn(1);
        
        connector.setProductsClient(mockProducts);
        
        for(String origSku : skuList)
        {
            Assert.assertNotSame(-1, connector.getStockInfoLight(origSku));
        }
    }

    @Test
    public void testLightInventoryNotExist()
    {
        String sku = "asjtlkwsjhklsdjh039";
        ProductsClient mock = mock(ProductsClient.class);
        connector.setProductsClient(mock);
        when(mock.getStockInfo(sku)).thenReturn(-1);
        int result = connector.getStockInfoLight(sku);
        Assert.assertEquals(-1, result);
        
        verify(mock).getStockInfo(sku);

    }

    @Test
    public void testLightInventorySuccess()
    {
        // % is a wild card, this just means it will return the inventory for the the first product it finds
        String sku = "%";
        ProductsClient mock = mock(ProductsClient.class);
        connector.setProductsClient(mock);
        when(mock.getStockInfo(sku)).thenReturn(10);
        int result = connector.getStockInfoLight(sku);
        Assert.assertEquals(10,result);

        verify(mock).getStockInfo(sku);
    }
}
