/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */
package org.mule.module.fulfillmentworks;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.map.SerializationConfig;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Module;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.mule.module.fulfillmentworks.client.OrdersClient;
import org.mule.module.fulfillmentworks.client.ProductsClient;
import org.mule.module.fulfillmentworks.transformers.OSBundleProductToFWOffer;
import org.mule.module.fulfillmentworks.transformers.OSBundleProductToFWProduct;
import org.mule.module.fulfillmentworks.transformers.OSSimpleProductToFWProduct;
import org.mule.module.fulfillmentworks.transformers.ProductTransformerHelper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jmx.export.annotation.ManagedAttribute;
import org.springframework.jmx.export.annotation.ManagedOperation;
import org.springframework.jmx.export.annotation.ManagedResource;

import com.fulfillmentworks.api.GetOfferResult;
import com.fulfillmentworks.api.Offer;
import com.fulfillmentworks.api.Order;
import com.fulfillmentworks.api.Product;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.WriteConcern;
import com.opensky.osis.model.product.AbstractProduct;
import com.opensky.osis.model.product.BundleProduct;
import com.opensky.osis.model.product.ConfigurableProduct;
import com.opensky.osis.model.product.SimpleProduct;


/**
 * FullfilmentWorksCloudConnector
 *
 * @author OpenSky
 */
@ManagedResource()
@Module(name = "fulfillmentworks",  schemaVersion = "1.0")
public class FulfillmentWorksCloudConnector {

    private transient final Logger LOG = LoggerFactory.getLogger(this.getClass());
    
    /**
     * The OrdersClient
     */
    @Configurable
    private OrdersClient ordersClient;
    
    /**
     * The ProductClient
     */
    @Configurable
    private ProductsClient productsClient;

    /**
     * osBundleProductToFWOffer
     */
    @Configurable
    private OSBundleProductToFWOffer osBundleProductToFWOffer;

    /**
     * osBundleProductToFWProduct
     */
    @Configurable
    private OSBundleProductToFWProduct osBundleProductToFWProduct;

    /**
     * osSimpleProductToFWProduct
     */
    @Configurable
    private OSSimpleProductToFWProduct osSimpleProductToFWProduct;

    /**
     * productTransformerHelper
     */
    @Configurable
    private ProductTransformerHelper productTransformerHelper;
    
    /**
     * the productFinder
     */
    @Configurable
    private ProductFinder productFinder;

    /**
     * mongodDb
     */
    @Configurable
    private DB mongoDb;
    
    /**
     * The connection timeout in ms.  Defaults to 60s
     */
    @Configurable
    @Optional
    @Default(value="60000")
    private Integer connectionTimeout;

    public ProductTransformerHelper getProductTransformerHelper() {
        return productTransformerHelper;
    }

    public void setProductTransformerHelper(ProductTransformerHelper productTransformerHelper) {
        this.productTransformerHelper = productTransformerHelper;
    }

    public OSBundleProductToFWOffer getOsBundleProductToFWOffer() {
        return osBundleProductToFWOffer;
    }

    public void setOsBundleProductToFWOffer(OSBundleProductToFWOffer osBundleProductToFWOffer) {
        this.osBundleProductToFWOffer = osBundleProductToFWOffer;
    }

    public OSBundleProductToFWProduct getOsBundleProductToFWProduct() {
        return osBundleProductToFWProduct;
    }

    public void setOsBundleProductToFWProduct(OSBundleProductToFWProduct osBundleProductToFWProduct) {
        this.osBundleProductToFWProduct = osBundleProductToFWProduct;
    }

    public OSSimpleProductToFWProduct getOsSimpleProductToFWProduct() {
        return osSimpleProductToFWProduct;
    }

    public void setOsSimpleProductToFWProduct(OSSimpleProductToFWProduct osSimpleProductToFWProduct) {
        this.osSimpleProductToFWProduct = osSimpleProductToFWProduct;
    }

    public void setMongoDb(DB mongoDb) {
        this.mongoDb = mongoDb;
    }

    public FulfillmentWorksCloudConnector()
    {

    }

    /**
     * Provides a simple way to get stockInfo
     * 
     * {@sample.xml ../../../doc/FulfillmentWorks-connector.xml.sample fulfillmentworks:get-stock-info-light}
     * 
     * @param sku A string with no wildcards, one complete SKU only
     * @return available inventory, or -1 on SKU not in Fulfillment works
     */
    @Processor
    @ManagedAttribute
    public int getStockInfoLight(String sku)
    {
        return productsClient.getStockInfo(sku);
    }

    /**
     * Add orders
     * <p/>
     * {@sample.xml ../../../doc/FulfillmentWorks-connector.xml.sample fulfillmentworks:add-orders}
     *
     * @param orders orders
     * @return Map from String "orderIds" to a List of {@link com.opensky.osis.model.SupplierOrder#fulfillmentId}
     */
    @Processor
    public List<String> addOrders(List<Order> orders) {
        
        return this.ordersClient.addOrders(orders);
    }

    private void addProducts(List<Map> prodMapList)
    {
        for (Map<String, Object> map : prodMapList)
        {
            Product tmpProduct = (Product)map.get("Product");
            Offer tmpOffer = (Offer)map.get("Offer");

           addProductToFW(tmpProduct, tmpOffer);
        }
    }

    /**
     * Add a product.
     * <p/>
     * <p/>
     * {@sample.xml ../../../doc/FulfillmentWorks-connector.xml.sample fulfillmentworks:add-product}
     *
     * @param product the product
     * @throws Exception an exception
     */
    @Processor
    public void addProduct(AbstractProduct product) throws Exception {
        if (product instanceof SimpleProduct) {
            this.addProduct((SimpleProduct) product);
        } else if (product instanceof BundleProduct) {
            this.addProduct((BundleProduct) product);
        } else if (product instanceof ConfigurableProduct) {
            this.addProduct((ConfigurableProduct) product);
        } else {
            LOG.error(String.format("Config product contains a product of unsupported type: %s", product.getId()));
        }
    }


    public void addProduct(SimpleProduct product) {
        List<Map> prodList = this.osSimpleProductToFWProduct.transform(product);
        List<Map> newList = new ArrayList<Map>();


        for (Map prodOffer : prodList) {
            Product prod = (Product) prodOffer.get("Product");

            if (!this.productFinder.exists(prod.getHeader().getPartNumber())) {
                newList.add(prodOffer);
            } else {
                LOG.debug(String.format("Skipping product that already exists %s", prod.getHeader().getPartNumber()));
            }
        }
        this.addProducts(newList);
    }

    public void addProduct(ConfigurableProduct product) throws Exception {
        for (AbstractProduct abstractProduct : product.getProducts()) {
            this.addProduct(abstractProduct);
        }
    }

    public void addProduct(BundleProduct product) throws Exception {
        if (StringUtils.isNotEmpty(this.searchBySKU(product.getStockItem().getSku()))) {
            LOG.debug(String.format("Skipping bundle that already exists: %s", product.getStockItem().getSku()));
            return;
        }

        Offer offer = this.osBundleProductToFWOffer.transform(product);

        List<Map> listOfProducts = this.osBundleProductToFWProduct.transform(product);
        List<Map> newList = new ArrayList<Map>();

        for (Map prodOffer : listOfProducts) {
            Product prod = (Product) prodOffer.get("Product");

            if (!this.productFinder.exists(prod.getHeader().getPartNumber())) {
                newList.add(prodOffer);
            }
        }

       this.addProducts(newList);

       this.addOffer(offer);
    }

    public int addProductToFW(Product product, Offer offer) 
    {
        return ordersClient.addProductToFW(product, offer);
    }

    /**
     * ToDo
     * <p/>
     * {@sample.xml ../../../doc/FulfillmentWorks-connector.xml.sample fulfillmentworks:add-offer}
     *
     * @param offer an offer
     * @return count
     */
    @Processor
    public int addOffer(Offer offer) {
        return ordersClient.addOffer(offer);
    }

    @ManagedOperation
    public String searchBySKU(String search) throws Exception {
        OfferSearch offerSearch = new OfferSearch().setSearchID(true).setSearchString(search);
        List<GetOfferResult> resultList = this.getOffers(offerSearch);

        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(SerializationConfig.Feature.WRITE_DATES_AS_TIMESTAMPS, false);
        mapper.configure(SerializationConfig.Feature.INDENT_OUTPUT, true);

        String resultString = new String();
        int offerCount = 1;
        for (GetOfferResult result : resultList) {
            String tmpString = "Offer search result #" + offerCount + mapper.writeValueAsString(result);
            offerCount++;
            resultString += tmpString + '\n';
            LOG.debug(tmpString);

        }
        return resultString;
    }

    /**
     * ToDo
     * <p/>
     * {@sample.xml ../../../doc/FulfillmentWorks-connector.xml.sample fulfillmentworks:get-stock-info}
     *
     * @param sku the sku
     * @return the info
     */
    @Processor
    public List<Map> getStockInfo(String sku) {
        OfferSearch offerSearch = new OfferSearch();

        // For reasons unknown to science setting this to false here actually causes the SOAP API to send a value of true to FW
        offerSearch.setSearchString(sku);
        offerSearch.setSearchID(true);
        offerSearch.setSearchDesc(false);

        List<Map> filteredResults = new ArrayList<Map>();

        List<GetOfferResult> resultList = this.getOffers(offerSearch);
        for (GetOfferResult result : resultList) {
            Map<String, String> item = new HashMap<String, String>();
            item.put("sku", result.getID());
            item.put("quantityAvailable", Integer.toString(result.getAvailable()));

            filteredResults.add(item);
        }

        return filteredResults;

    }

    /**
     * ToDo
     *
     * @param searchParams searchParams
     *                     <p/>
     *                     {@sample.xml ../../../doc/FulfillmentWorks-connector.xml.sample fulfillmentworks:get-offers}
     * @return offer results
     */
    @Processor
    public List<GetOfferResult> getOffers(OfferSearch searchParams) {
        return ordersClient.getOffers(searchParams);
    }


    /**
     * TODO This needs to be updated to return a status for each item that was ordered
     * it will work as it is for now, but when multi item cart comes out this will not work
     * <p/>
     * {@sample.xml ../../../doc/FulfillmentWorks-connector.xml.sample fulfillmentworks:get-order-status}
     *
     * @param id the id
     * @return the result
     */
    @Processor
    @ManagedAttribute
    public String getOrderStatus(String id) {
        return ordersClient.getOrderStatus(id);
    }
    
    public void setConnectionTimeout(Integer connectionTimeout)
    {
        this.connectionTimeout = connectionTimeout;
    }
    
    public void setOrdersClient(OrdersClient ordersClient)
    {
        this.ordersClient = ordersClient;
    }
    
    public void setProductsClient(ProductsClient productsClient)
    {
        this.productsClient = productsClient;
    }
    
    public ProductFinder getProductFinder()
    {
        return productFinder;
    }
    
    public void setProductFinder(ProductFinder productFinder)
    {
        this.productFinder = productFinder;
    }
}
